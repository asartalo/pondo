# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.
require 'simplecov'

require 'cucumber/rails'
# require 'capybara/poltergeist'
# require 'capybara-webkit'
# require Rails.root.join('features', 'step_definitions', 'constants').to_s

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :truncation
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

# Capybara.default_driver = :poltergeist

# Change server port
Capybara.app_host = 'http://localhost:3030'
Capybara.server_port = 3030

# Capybara.default_driver = :poltergeist
# Capybara.register_driver :poltergeist do |app|
#     options = {
#         :js_errors => true,
#         :timeout => 120,
#         :debug => false,
#         :phantomjs_options => ['--load-images=no', '--disk-cache=false'],
#         :inspector => true,
#     }
#     Capybara::Poltergeist::Driver.new(app, options)
# end
# Capybara.default_driver = :webkit
# Capybara::Webkit.configure do |config|
#   # config.allow_url("https://fonts.googleapis.com/*")
#   # config.debug = true
#   config.block_unknown_urls
# end

Capybara.default_driver = :selenium
Capybara.register_driver :selenium do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end
# Capybara.register_driver :selenium do |app|
#   Capybara::Selenium::Driver.new(
#     app,
#     browser: :firefox,
#     desired_capabilities: Selenium::WebDriver::Remote::Capabilities.firefox(marionette: false)
#   )
# end

# Hooks
Before do |scenario|
  # Set test to true and mock the OAuth response
  OmniAuth.config.test_mode = true
end

After do |scenario|
  Capybara.use_default_driver
  OmniAuth.config.mock_auth[:default] = nil
  OmniAuth.config.test_mode = false
  if scenario.failed?
    save_screenshot
  end
end

Before('@nitrolinks') do
  visit pondo_page("nitrolinks")
  jscript('pondoTesting.clearDomLoads()')
  @initial_page_loads = jscript('pondoTesting.domLoadCount()').to_i
end

Around('@email') do |scenario, block|
  ActionMailer::Base.delivery_method = :test
  ActionMailer::Base.perform_deliveries = true
  ActionMailer::Base.deliveries.clear

  old_adapter = ActiveJob::Base.queue_adapter
  ActiveJob::Base.queue_adapter = :inline
  block.call
  ActiveJob::Base.queue_adapter = old_adapter
end
